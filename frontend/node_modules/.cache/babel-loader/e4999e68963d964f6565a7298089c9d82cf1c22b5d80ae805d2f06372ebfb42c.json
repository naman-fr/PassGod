{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\naman\\\\Downloads\\\\PassGod\\\\frontend\\\\src\\\\components\\\\ProtectedRoute.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate, Outlet } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext'; // Changed to import useAuth\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children\n}) => {\n  _s();\n  const {\n    user,\n    loading\n  } = useAuth(); // Get user and loading state from useAuth hook\n\n  if (loading) {\n    // Optionally, render a loading spinner or placeholder\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading authentication...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 12\n    }, this);\n  }\n  if (!user) {\n    // User is not authenticated, redirect to login page\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 12\n    }, this);\n  }\n\n  // User is authenticated, render the child routes\n  return children ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false) : /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 39\n  }, this);\n};\n_s(ProtectedRoute, \"EmJkapf7qiLC5Br5eCoEq4veZes=\", false, function () {\n  return [useAuth];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","Outlet","useAuth","jsxDEV","_jsxDEV","Fragment","_Fragment","ProtectedRoute","children","_s","user","loading","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","_c","$RefreshReg$"],"sources":["C:/Users/naman/Downloads/PassGod/frontend/src/components/ProtectedRoute.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Navigate, Outlet } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext'; // Changed to import useAuth\r\n\r\ninterface ProtectedRouteProps {\r\n  children?: React.ReactNode;\r\n}\r\n\r\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {\r\n  const { user, loading } = useAuth(); // Get user and loading state from useAuth hook\r\n\r\n  if (loading) {\r\n    // Optionally, render a loading spinner or placeholder\r\n    return <div>Loading authentication...</div>;\r\n  }\r\n\r\n  if (!user) {\r\n    // User is not authenticated, redirect to login page\r\n    return <Navigate to=\"/login\" replace />;\r\n  }\r\n\r\n  // User is authenticated, render the child routes\r\n  return children ? <>{children}</> : <Outlet />;\r\n};\r\n\r\nexport default ProtectedRoute; "],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,MAAM,QAAQ,kBAAkB;AACnD,SAASC,OAAO,QAAQ,wBAAwB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAMlD,MAAMC,cAA6C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACtE,MAAM;IAAEC,IAAI;IAAEC;EAAQ,CAAC,GAAGT,OAAO,CAAC,CAAC,CAAC,CAAC;;EAErC,IAAIS,OAAO,EAAE;IACX;IACA,oBAAOP,OAAA;MAAAI,QAAA,EAAK;IAAyB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC7C;EAEA,IAAI,CAACL,IAAI,EAAE;IACT;IACA,oBAAON,OAAA,CAACJ,QAAQ;MAACgB,EAAE,EAAC,QAAQ;MAACC,OAAO;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzC;;EAEA;EACA,OAAOP,QAAQ,gBAAGJ,OAAA,CAAAE,SAAA;IAAAE,QAAA,EAAGA;EAAQ,gBAAG,CAAC,gBAAGJ,OAAA,CAACH,MAAM;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAChD,CAAC;AAACN,EAAA,CAfIF,cAA6C;EAAA,QACvBL,OAAO;AAAA;AAAAgB,EAAA,GAD7BX,cAA6C;AAiBnD,eAAeA,cAAc;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}